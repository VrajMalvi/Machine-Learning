# -*- coding: utf-8 -*-
"""Multiple_linear_regression.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/10yQ5nlVgUO_TsP06w0GM6_SYFL2f90KN

# Multiple Linear Regression

## Importing the libraries
"""

import numpy as np
import matplotlib.pyplot as plt
import pandas as pd

"""## Importing the dataset"""

df = pd.read_csv('50_Startups.csv')
x = df.iloc[:, :-1].values
y = df.iloc[:, -1].values

x[0:5]

"""## Encoding categorical data"""

# one hot encode for converting str to int (o's and 1's)

from sklearn.compose import ColumnTransformer
from sklearn.preprocessing import OneHotEncoder

# below we add [3] because we want to apply onehot encoding on contry colum whose index is [3]
ct = ColumnTransformer(transformers=[('encoder', OneHotEncoder(), [3])], remainder='passthrough')
x = np.array(ct.fit_transform(x))

x[:8] # multiple Linear regression will take care of dummy variable trap so no need to remove one dummy column from x

"""## **NOTE**: no need to apply feature scaling in multiple linear regression as it will scale all the value to same range using y = b0 + b1.X1 +b2.X2 ...

So, b is coefficient that applied to all features. In short, regardless of higher or lower value coefficient will compansate to put everything on same scale.

## It's not necessary to check assumptions.

## Splitting the dataset into the Training set and Test set
"""

from sklearn.model_selection import train_test_split

x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.2, random_state = 0)

"""## Training the Multiple Linear Regression model on the Training set"""

from sklearn.linear_model import LinearRegression

regressor = LinearRegression()
regressor.fit(x_train, y_train)

"""## Predicting the Test set results"""

y_pred = regressor.predict(x_test)
np.set_printoptions(precision=2)

# converting y values to vertical form
print(np.concatenate((y_pred.reshape(len(y_pred),1), y_test.reshape(len(y_test),1)),1)) # here at last 1 is for axis, 1 for vertical

"""## Making a single prediction (for example the profit of a startup with R&D Spend = 160000, Administration Spend = 130000, Marketing Spend = 300000 and State = 'California')"""

print(regressor.predict([[1, 0, 0, 160000, 130000, 300000]]))

"""Therefore, our model predicts that the profit of a Californian startup which spent 160000 in R&D, 130000 in Administration and 300000 in Marketing is $ 181566,92.

**Important note 1:** Notice that the values of the features were all input in a double pair of square brackets. That's because the "predict" method always expects a 2D array as the format of its inputs. And putting our values into a double pair of square brackets makes the input exactly a 2D array. Simply put:

$1, 0, 0, 160000, 130000, 300000 \rightarrow \textrm{scalars}$

$[1, 0, 0, 160000, 130000, 300000] \rightarrow \textrm{1D array}$

$[[1, 0, 0, 160000, 130000, 300000]] \rightarrow \textrm{2D array}$

**Important note 2:** Notice also that the "California" state was not input as a string in the last column but as "1, 0, 0" in the first three columns. That's because of course the predict method expects the one-hot-encoded values of the state, and as we see in the second row of the matrix of features X, "California" was encoded as "1, 0, 0". And be careful to include these values in the first three columns, not the last three ones, because the dummy variables are always created in the first columns.

## Getting the final linear regression equation with the values of the coefficients
"""

print(regressor.coef_)
print(regressor.intercept_)

"""Therefore, the equation of our multiple linear regression model is:

$$\textrm{Profit} = 86.6 \times \textrm{Dummy State 1} - 873 \times \textrm{Dummy State 2} + 786 \times \textrm{Dummy State 3} + 0.773 \times \textrm{R&D Spend} + 0.0329 \times \textrm{Administration} + 0.0366 \times \textrm{Marketing Spend} + 42467.53$$

**Important Note:** To get these coefficients we called the "coef_" and "intercept_" attributes from our regressor object. Attributes in Python are different than methods and usually return a simple value or an array of values.
"""